(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{460:function(s,a,t){"use strict";t.r(a);var e=t(51),n=Object(e.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"理论面试题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#理论面试题"}},[s._v("#")]),s._v(" 理论面试题")]),s._v(" "),t("blockquote",[t("p",[s._v("以下是我2020年在杭州面试时总结的面试题，可供参考")])]),s._v(" "),t("h2",{attrs:{id:"vue"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#vue"}},[s._v("#")]),s._v(" VUE")]),s._v(" "),t("h3",{attrs:{id:"_1-history-和-hash-的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-history-和-hash-的区别"}},[s._v("#")]),s._v(" 1.\thistory 和 hash 的区别")]),s._v(" "),t("p",[s._v("（hash通过hashChange事件来实现，history通过pushState() 和 replaceState() ）")]),s._v(" "),t("h3",{attrs:{id:"_2-计算属性-和-watch-的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-计算属性-和-watch-的区别"}},[s._v("#")]),s._v(" 2.\t计算属性 和 watch 的区别")]),s._v(" "),t("p",[s._v("单页面应用 和 多页面应用的区别")]),s._v(" "),t("h3",{attrs:{id:"_3-vue-x都有哪些属性-及其作用-如何存储数据"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-vue-x都有哪些属性-及其作用-如何存储数据"}},[s._v("#")]),s._v(" 3.\tVue-x都有哪些属性，及其作用,如何存储数据")]),s._v(" "),t("p",[s._v("(state,mutations,getters,actions,module)\ndispatch：异步操作，写法： this.$store.dispatch(‘mutations方法名’,值)\ncommit：同步操作，写法：this.$store.commit(‘mutations方法名’,值)")]),s._v(" "),t("h3",{attrs:{id:"_4-vue的两大核心"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-vue的两大核心"}},[s._v("#")]),s._v(" 4.\tVue的两大核心")]),s._v(" "),t("p",[s._v("(组件化开发,数据驱动）")]),s._v(" "),t("h3",{attrs:{id:"_5-前端性能优化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-前端性能优化"}},[s._v("#")]),s._v(" 5.\t前端性能优化")]),s._v(" "),t("p",[s._v("(路由懒加载，组件按需引入，图片压缩转码，文件压缩，提前请求，功能封装)")]),s._v(" "),t("h3",{attrs:{id:"_6-mvc和mvvm"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-mvc和mvvm"}},[s._v("#")]),s._v(" 6.\tmvc和mvvm")]),s._v(" "),t("p",[s._v("（mvc是后端的一种开发模式,model中处理数据的增删改查，view用于展示页面，contorller用来实现复杂的逻辑处理。mvvm是前端的开发模式，每一个页面都可以看作是一个mvvm，vm是连接m和v的桥梁，因为vm提供了数据双向绑定）")]),s._v(" "),t("h3",{attrs:{id:"_7-this-nexttick"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-this-nexttick"}},[s._v("#")]),s._v(" 7.\tthis.$nextTick")]),s._v(" "),t("p",[s._v("（因为vue的dom更新是异步渲染的，这个方法的回调可以确保在前面的dom异步渲染完成之后才调用）\n"),t("strong",[s._v("tips:")]),t("br"),s._v("\nthis.$nextTick会等同一个作用域下的所有同步代码执行完毕才执行，不会等待异步代码")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("  data() {\n    return {\n      price: 10,\n    };\n  },\n  methods: {\n    add() {\n      this.price++;\n      this.$nextTick(() => {\n        console.log(this.price);             //1200\n      });\n      this.price ++;\n      setTimeout(() => {\n        this.price++;\n        console.log(this.price);             //1201\n      }, 2000);\n      this.price = this.price + '00'\n    },\n  },\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br")])]),t("h3",{attrs:{id:"_8-对vue响应式理解-vue是如何实现数据双向绑定的-vue的优点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8-对vue响应式理解-vue是如何实现数据双向绑定的-vue的优点"}},[s._v("#")]),s._v(" 8.\t对vue响应式理解  vue是如何实现数据双向绑定的  vue的优点")]),s._v(" "),t("p",[s._v("我们在使用以前框架的时候，先得操作JS修改数据，然后再操作DOM改变视图，遇到复杂的页面更为麻烦，写的80%的代码都是跟核心业务逻辑无关的。"),t("br"),s._v("\n现在vue帮我们把这些都处理好了，我们之用专注于组件和数据之间的关系，修改视图数据会发生变化，修改数据视图会发生变化。更简单，更靠谱，更方便~")]),s._v(" "),t("h3",{attrs:{id:"_9-如何拓展一个vue组件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_9-如何拓展一个vue组件"}},[s._v("#")]),s._v(" 9.\t如何拓展一个Vue组件")]),s._v(" "),t("h3",{attrs:{id:"_10-vue删除一个数组元素或者对象属性-原因"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_10-vue删除一个数组元素或者对象属性-原因"}},[s._v("#")]),s._v(" 10.\tVUE删除一个数组元素或者对象属性，原因？")]),s._v(" "),t("h3",{attrs:{id:"_11-事件总线eventbus的原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_11-事件总线eventbus的原理"}},[s._v("#")]),s._v(" 11.\t事件总线eventBus的原理")]),s._v(" "),t("h3",{attrs:{id:"_12-webpack打包步骤"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_12-webpack打包步骤"}},[s._v("#")]),s._v(" 12.\twebpack打包步骤")]),s._v(" "),t("p",[s._v("（初始化项目npm init 打包webpack ）")]),s._v(" "),t("h3",{attrs:{id:"_13-vue-config-js配置"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_13-vue-config-js配置"}},[s._v("#")]),s._v(" 13.\tvue.config.js配置")]),s._v(" "),t("p",[s._v("（）")]),s._v(" "),t("h3",{attrs:{id:"_14-scoped实现原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_14-scoped实现原理"}},[s._v("#")]),s._v(" 14.\tscoped实现原理")]),s._v(" "),t("p",[s._v("（通过该属性可以实现组件间的样式独立，原理是postcss的转译，会给每一个dom动态添加一个唯一的属性，并在css选择器中选中）")]),s._v(" "),t("h3",{attrs:{id:"_15-uni-app环境变量"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_15-uni-app环境变量"}},[s._v("#")]),s._v(" 15.\tUni-app环境变量")]),s._v(" "),t("h3",{attrs:{id:"_16-vue是如何渲染dom的-render函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_16-vue是如何渲染dom的-render函数"}},[s._v("#")]),s._v(" 16.\tVue是如何渲染DOM的（Render函数）")]),s._v(" "),t("p",[s._v("通过vue的render函数，有一个参数为createElement,他本身也是个函数\n当节点发生变化时，Vue 通过建立一个虚拟 DOM 来追踪自己要如何改变真实 DOM.\ncreateElement会返回一个虚拟节点（虚拟DOM or Vnode），“虚拟 DOM”是我们对由 Vue 组件树建立起来的整个 VNode 树的称呼\nvue源码分析")]),s._v(" "),t("h3",{attrs:{id:"_17-vue-diff算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_17-vue-diff算法"}},[s._v("#")]),s._v(" 17.\tvue diff算法")]),s._v(" "),t("h3",{attrs:{id:"_18-vue2的数组更新存在什么问题"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_18-vue2的数组更新存在什么问题"}},[s._v("#")]),s._v(" 18.   vue2的数组更新存在什么问题")]),s._v(" "),t("h3",{attrs:{id:"_19-vue2和vue3有什么区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_19-vue2和vue3有什么区别"}},[s._v("#")]),s._v(" 19.   vue2和vue3有什么区别")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[s._v("  - vue3支持vue2的大多数特性\n  - vue3更好的支持ts\n  - Vue3使用Proxy和flact代替了vue2的defineproperty来实现数据代理\n  - 新的脚手架工具vite\n  - 重写了虚拟DOM 更快了\n")])])]),t("h2",{attrs:{id:"浏览器原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#浏览器原理"}},[s._v("#")]),s._v(" 浏览器原理")]),s._v(" "),t("h3",{attrs:{id:"从输入http到页面显示浏览器发生了啥"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#从输入http到页面显示浏览器发生了啥"}},[s._v("#")]),s._v(" "),t("strong",[s._v("从输入http到页面显示浏览器发生了啥")])]),s._v(" "),t("blockquote",[t("p",[s._v("输入的url经过DNS(分布式数据库，记录了域名和其IP地址的对应关系)解析之后得到服务器IP地址，接着向服务器发起请求，经过TCP三次握手确认连接后，浏览器得到资源开始构建DOM树，并最终渲染出来"),t("br"),s._v("\n输入bilibili.com  DNS解析得到B站的IP地址。接着向B站发起获得首页内容的请求")])]),s._v(" "),t("ul",[t("li",[s._v("浏览器向 DNS 服务器请求解析该 URL 中的域名所对应的 IP 地址;")]),s._v(" "),t("li",[s._v("解析出 IP 地址后，根据该 IP 地址和默认端口 80，和服务器建立TCP连接;")]),s._v(" "),t("li",[s._v("浏览器发出读取文件(URL 中域名后面部分对应的文件)的HTTP 请求，该请求报文作为 TCP 三次握手的第三个报文的数据发送给服务器;")]),s._v(" "),t("li",[s._v("服务器对浏览器请求作出响应，并把对应的 html 文本发送给浏览器;")]),s._v(" "),t("li",[s._v("释放 TCP连接;")]),s._v(" "),t("li",[s._v("浏览器将该 html 文本并显示内容;")])]),s._v(" "),t("h3",{attrs:{id:"tcp三次握手的过程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tcp三次握手的过程"}},[s._v("#")]),s._v(" "),t("strong",[s._v("TCP三次握手的过程")])]),s._v(" "),t("ol",[t("li",[s._v("A确定B能接受信息")]),s._v(" "),t("li",[s._v("A确定B能发送信息")]),s._v(" "),t("li",[s._v("B确定A能接受信息")]),s._v(" "),t("li",[s._v("B确定A能发送信息")])]),s._v(" "),t("h3",{attrs:{id:"浏览器缓存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#浏览器缓存"}},[s._v("#")]),s._v(" "),t("strong",[s._v("浏览器缓存")])]),s._v(" "),t("p",[s._v("（强缓存，协商缓存：共同点都是从浏览器读取资源，不同点强缓存不给服务器发请求，直接读；协商是发送，然后根据返回信息决定是否使用缓存）")]),s._v(" "),t("h3",{attrs:{id:"cdn"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cdn"}},[s._v("#")]),s._v(" "),t("strong",[s._v("CDN")])]),s._v(" "),t("h3",{attrs:{id:"http-和https的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#http-和https的区别"}},[s._v("#")]),s._v(" "),t("strong",[s._v("HTTP 和HTTPS的区别")])]),s._v(" "),t("p",[s._v("是客户端和服务器请求和接受数据的一个标准，规定客户端和服务端的数据传输格式。"),t("br"),s._v("\n默认端口是80。"),t("br"),s._v("\n基于TCP/IP的应用层协议，无状态。"),t("br"),s._v("\n一个HTTP请求报文包括请求行，请求头，空的一行，请求体。"),t("br"),s._v("\n客户端向服务器发起一个请求报文，包含请求的方法，协议版本，路径，请求头以及数据。服务端返回一个状态作为响应，响应内容包括协议版本，成功错误代码，服务器信息，响应头以及数据")]),s._v(" "),t("h3",{attrs:{id:"token被人恶意截取怎么办"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#token被人恶意截取怎么办"}},[s._v("#")]),s._v(" "),t("strong",[s._v("token被人恶意截取怎么办")])]),s._v(" "),t("ol",[t("li",[s._v("在存储的时候把 token 进行对称加密存储，用时解开。")]),s._v(" "),t("li",[s._v("将请求 URL、时间戳、token 三者进行合并加盐签名，服务端校验有效性。")]),s._v(" "),t("li",[s._v("HTTPS 对 URL 进行判断。")])]),s._v(" "),t("h3",{attrs:{id:"常用的的请求头都有哪些"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#常用的的请求头都有哪些"}},[s._v("#")]),s._v(" "),t("strong",[s._v("常用的的请求头都有哪些")])]),s._v(" "),t("ol",[t("li",[t("p",[s._v("multipart/form-data ： 需要在表单中进行文件上传时，就需要使用该格式")])]),s._v(" "),t("li",[t("p",[s._v("application/x-www-form-urlencoded ： "),t("code",[s._v("<")]),s._v("form encType=””>中默认的encType，form表单数据被编码为key/value格式发送到服务器（表单默认的提交数据的格式）")])]),s._v(" "),t("li",[t("p",[s._v("application/json    ： JSON数据格式")])])]),s._v(" "),t("h3",{attrs:{id:"get和post区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#get和post区别"}},[s._v("#")]),s._v(" "),t("strong",[s._v("get和post区别")])]),s._v(" "),t("ol",[t("li",[s._v("请求形式")]),s._v(" "),t("li",[s._v("get获取数据，post提交修改")]),s._v(" "),t("li",[s._v("get可以使用缓存,post不可以")])]),s._v(" "),t("h3",{attrs:{id:"与缓存相关的请求头有哪些-我们一般都缓存哪些文件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#与缓存相关的请求头有哪些-我们一般都缓存哪些文件"}},[s._v("#")]),s._v(" "),t("strong",[s._v("与缓存相关的请求头有哪些，我们一般都缓存哪些文件")])]),s._v(" "),t("h3",{attrs:{id:"什么是跨域-如何解决"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#什么是跨域-如何解决"}},[s._v("#")]),s._v(" "),t("strong",[s._v("什么是跨域，如何解决？")])]),s._v(" "),t("p",[s._v("说到跨域就得先了解同源策略")]),s._v(" "),t("blockquote",[t("p",[s._v("同源策略是浏览器的一个最核心也最基本的安全功能，不同源的客户端脚本在没有明确授权的情况下，不能读写对方资源"),t("br"),s._v("\n源（origin）就是协议、域名和端口号"),t("br"),s._v("\n即便两个不同的域名指向同一个IP地址，也非同源")])]),s._v(" "),t("p",[t("strong",[s._v("概念")])]),s._v(" "),t("img",{attrs:{src:"/assets/img/crossDomain.jpg",width:"500",height:"auto",align:"middle"}}),s._v(" "),t("p",[t("strong",[s._v("利用jsonp解决跨域")]),t("br"),s._v("\nHTML中有一些标签是可以跨域访问资源的,如link、img、src以及iframe等，jsonp就是利用了src的这一特性"),t("br"),s._v(" "),t("img",{attrs:{src:"/assets/img/jsonp.jpg",width:"500",height:"auto",align:"middle"}})]),s._v(" "),t("p",[t("strong",[s._v("缺点")]),s._v("：")]),s._v(" "),t("ul",[t("li",[s._v("需要服务的支持")]),s._v(" "),t("li",[s._v("只能发起GET请求")])]),s._v(" "),t("hr"),s._v(" "),t("p",[t("strong",[s._v("利用CORS解决跨域")]),t("br"),s._v("\n是后端人员在服务中设置允许跨域请求，前端人员不用做其他处理，如果需要携带cookie的话，则前后端都需要设置。是一种规范化的跨域请求解决方案，安全可靠。")]),s._v(" "),t("p",[t("strong",[s._v("优势")])]),s._v(" "),t("ul",[t("li",[s._v("在服务端进行控制是否允许跨域，可自定义规则")]),s._v(" "),t("li",[s._v("支持各种请求方式")])]),s._v(" "),t("p",[t("strong",[s._v("缺点")])]),s._v(" "),t("ul",[t("li",[s._v("会产生额外的请求")])]),s._v(" "),t("p",[t("strong",[s._v("proxy代理解决跨域")]),t("br"),s._v("\n通过中间件来实现,浏览器之间有跨域限制，但服务器之间没有，所以中间件就是服务器")]),s._v(" "),t("p",[t("strong",[s._v("缺点")])]),s._v(" "),t("ul",[t("li",[s._v("只能在生产环境中使用")])]),s._v(" "),t("h2",{attrs:{id:"js"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#js"}},[s._v("#")]),s._v(" JS")]),s._v(" "),t("h3",{attrs:{id:"_1-节流和防抖以及使用场景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-节流和防抖以及使用场景"}},[s._v("#")]),s._v(" 1.\t节流和防抖以及使用场景")]),s._v(" "),t("p",[t("a",{attrs:{href:"https://www.bilibili.com/video/BV17b4y1X7yp/?spm_id_from=333.788.recommend_more_video.-1",target:"_blank",rel:"noopener noreferrer"}},[s._v("节流"),t("OutboundLink")],1),s._v(" ：事件触发一次之后设置时间间隔，这段时间内，不会开始下一次触发(在设置时间内，只会触发一次效果)。"),t("br"),s._v(" "),t("a",{attrs:{href:"https://www.bilibili.com/video/BV17b4y1X7yp",target:"_blank",rel:"noopener noreferrer"}},[s._v("防抖"),t("OutboundLink")],1),s._v("：一段时间内点击多次，只执行最后一次。")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("    <button id=\"fangdou\">防抖按钮</button>\n    <button id=\"jieliu\">节流按钮</button>\n\n    <script>\n\n        //防抖\n        function cons() { console.log(this) }\n\n        function antiShake(fn, time) {\n            let setTime;\n            return function () {\n                let context = this;\n                let arg = arguments;\n\n                clearTimeout(setTime)\n\n                setTime = setTimeout(function () {\n                    fn.apply(context, arg)\n                }, time)\n            }\n        }\n\n\n        fangdou.addEventListener('click', antiShake(cons, 2000))\n        //节流\n        function throttle(fn, time) {\n            let setTime;\n\n            return function () {\n                let context = this;\n                let arg = arguments;\n                if (setTime) {\n                    return\n                }\n                setTime = setTimeout(function () {\n                    fn.call(context,arg);\n                    setTime = null\n                }, time)\n            }\n        }\n\n        jieliu.addEventListener('click', throttle(cons, 2000))\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br"),t("span",{staticClass:"line-number"},[s._v("33")]),t("br"),t("span",{staticClass:"line-number"},[s._v("34")]),t("br"),t("span",{staticClass:"line-number"},[s._v("35")]),t("br"),t("span",{staticClass:"line-number"},[s._v("36")]),t("br"),t("span",{staticClass:"line-number"},[s._v("37")]),t("br"),t("span",{staticClass:"line-number"},[s._v("38")]),t("br"),t("span",{staticClass:"line-number"},[s._v("39")]),t("br"),t("span",{staticClass:"line-number"},[s._v("40")]),t("br"),t("span",{staticClass:"line-number"},[s._v("41")]),t("br"),t("span",{staticClass:"line-number"},[s._v("42")]),t("br")])]),t("h3",{attrs:{id:"_2-箭头函数和普通函数的差别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-箭头函数和普通函数的差别"}},[s._v("#")]),s._v(" 2.\t箭头函数和普通函数的差别")]),s._v(" "),t("p",[s._v("(箭头函数是匿名函数，不能作为构造函数，单个表达式的时候可以省略大括号。箭头函数没有arguments属性，取而代之用rest参数...解决。箭头函数的 this 永远指向其上下文的  this ，任何方法都改变不了其指向，如 call() ,  bind() ,  apply() ,普通函数的this指向调用它的那个对象)")]),s._v(" "),t("h3",{attrs:{id:"_3-var-let-const的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-var-let-const的区别"}},[s._v("#")]),s._v(" 3.\tvar let const的区别")]),s._v(" "),t("p",[s._v("（let，const不存在变量提升）")]),s._v(" "),t("h3",{attrs:{id:"_4-es6数组新方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-es6数组新方法"}},[s._v("#")]),s._v(" 4.\tES6数组新方法")]),s._v(" "),t("p",[s._v("（Array.find(),Array.findIndex()传入一个回调，返回以第一个匹配到的值或者下标\nArray.fill(value,start,end)）填充或者替换指定位置的元素\nArray.form ()将类数组对象转为真正的数组")]),s._v(" "),t("h3",{attrs:{id:"_5-高阶函数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-高阶函数"}},[s._v("#")]),s._v(" 5.\t高阶函数")]),s._v(" "),t("p",[s._v("avaScript的一个函数就可以接收另一个函数作为参数，这种函数就称之为高阶函数")]),s._v(" "),t("h3",{attrs:{id:"_6-图片上传"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-图片上传"}},[s._v("#")]),s._v(" 6.\t图片上传")]),s._v(" "),t("h3",{attrs:{id:"_7-map和foreach的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-map和foreach的区别"}},[s._v("#")]),s._v(" 7.\tmap和forEach的区别")]),s._v(" "),t("p",[s._v("（map返回的是一个新的数组，forEach改变的是原数组。 相同点：都是数组方法，都是循环遍历，三个参数相同，this指向window）")]),s._v(" "),t("h3",{attrs:{id:"_8-for-in适用于遍历对象-for-of适用于遍历数组"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_8-for-in适用于遍历对象-for-of适用于遍历数组"}},[s._v("#")]),s._v(" 8.\tfor in适用于遍历对象,for  of适用于遍历数组")]),s._v(" "),t("h3",{attrs:{id:"_9-promise"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_9-promise"}},[s._v("#")]),s._v(" 9.\tPromise")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("//基本使用\nlet promise = new Promise((resolve,reject)=>{\nif(true){\n   resolve('promise成功啦')\n}else{\n   reject('promise失败啦')\n}\n})\n\npromise.then(res=>{\nconsole.log(res)\n}).catch(err=>{\nconsole.log(err)\n})\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br")])]),t("ul",[t("li",[s._v("Promise在new的时候，里面的程序会被立即执行，then catch里的才会异步")]),s._v(" "),t("li",[s._v("Promise.all（）Promise的几个状态（1、pending[待定]初始状态 2、fulfilled操作成功 3、rejected操作失败）")])]),s._v(" "),t("h3",{attrs:{id:"_10-对模块化的理解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_10-对模块化的理解"}},[s._v("#")]),s._v(" 10.\t对模块化的理解")]),s._v(" "),t("p",[s._v("（我们将一个复杂的程序依据一定的规则封装成几个块，并相互依赖组合。每个块只是向外部暴露一些接口）")]),s._v(" "),t("h3",{attrs:{id:"_11-cookie-localstorage-sessionstorage"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_11-cookie-localstorage-sessionstorage"}},[s._v("#")]),s._v(" 11.\tcookie，localStorage,sessionStorage")]),s._v(" "),t("p",[s._v("(cookie就是一小段文本信息)")]),s._v(" "),t("h3",{attrs:{id:"_12-对象的继承有哪几种方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_12-对象的继承有哪几种方式"}},[s._v("#")]),s._v(" 12.\t对象的继承有哪几种方式")]),s._v(" "),t("h3",{attrs:{id:"_13-数组的扁平化处理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_13-数组的扁平化处理"}},[s._v("#")]),s._v(" 13.\t数组的扁平化处理")]),s._v(" "),t("h3",{attrs:{id:"_14-树形结构的数据处理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_14-树形结构的数据处理"}},[s._v("#")]),s._v(" 14.\t树形结构的数据处理")]),s._v(" "),t("h3",{attrs:{id:"_15-promise和settimeout的执行顺序"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_15-promise和settimeout的执行顺序"}},[s._v("#")]),s._v(" 15.\tPromise和setTimeout的执行顺序")]),s._v(" "),t("p",[s._v("setTimeout在下一轮“事件循环”开始时执行，\nPromise.then() 在本轮“事件循环”结束时执行。因此then 函数先输出，settimeout后输出。\n参考")]),s._v(" "),t("h3",{attrs:{id:"_16-那些常见操作会造成内存泄漏"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_16-那些常见操作会造成内存泄漏"}},[s._v("#")]),s._v(" 16.\t那些常见操作会造成内存泄漏")]),s._v(" "),t("p",[s._v("1. setTimeout 的第一个参数使用字符串而非函数的话,会引发内存泄露\n2. 全局变量\n3. 闭包\n4. dom清空或删除时，事件未清除导致的内存泄漏\n5. 控制台日志\n6. 循环")]),s._v(" "),t("h3",{attrs:{id:"_17-null和undefined的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_17-null和undefined的区别"}},[s._v("#")]),s._v(" 17.   null和undefined的区别")]),s._v(" "),t("ul",[t("li",[t("p",[s._v("一些神奇的现象")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("null == undefined\n12 + null = null\n12 + undefined = NaN\nNumber('12')         //12\nNumber(undefined)    //NaN\nNumber(null)         //0\n\n//给一个变量赋值为undefined相当于没赋值\nfunction show(a,b=5){\n   console.log(a,b)\n}\n\nshow(4,undefined)       //4,5\nshow(4,null)            //4,null\n//解构赋值也是如此\nconst [a,b=88] = [11,undefined]\nconsole.log(a,b)        //11,88\n\nconst [a,b=88] = [11,null]\nconsole.log(a,b)        //11,null\n\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br")])]),t("p",[t("strong",[s._v("undefined:")]),t("br"),s._v("\n理解(当系统找不到你想到得到的那个值的时候，被动的抛出undefined)")]),s._v(" "),t("ol",[t("li",[s._v("被迫的替代性方案")]),s._v(" "),t("li",[s._v("本质是特殊对象")]),s._v(" "),t("li",[s._v("JS特有的关键词")]),s._v(" "),t("li",[s._v("作用非常类似于没写(函数传参如果传undefined等同于什么都没写)")])]),s._v(" "),t("p",[t("strong",[s._v("null:")]),t("br"),s._v("\n理解(当系统找不到你想到得到的那个值的时候，被动的抛出undefined)")]),s._v(" "),t("ol",[t("li",[s._v("主动选择(只有当手动赋值为null，才可能为null)")]),s._v(" "),t("li",[s._v("本质是0,至于typeof null等于'object'仅仅是因为JS作者这么设计了")]),s._v(" "),t("li",[s._v("接近于其他语言的NULL")]),s._v(" "),t("li",[s._v("显式的空(函数传参传null就代表是传了值的)")])])])]),s._v(" "),t("h3",{attrs:{id:"_18-this"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_18-this"}},[s._v("#")]),s._v(" 18. "),t("strong",[s._v("this")])]),s._v(" "),t("blockquote",[t("p",[s._v("用于访问当前方法所属于的对象 普通函数的this跟定义是无关的，跟调用有关，属于调用它的对象")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("function show(){\n   console.log(this)\n}\n\n//1.直接调用-----指向window||undefined \nshow()；\n原本这个show不属于任何对象，按理说this应该没有指向才对，这是JS作者设计的一个失误，他就是这么设计了。\n后来他想了一个弥补的办法，那就是严格模式'use strict'\n在JS代码顶部加入这个字符串  那么上面的代码输出结果即为undefined \n\n\n//2.挂载到对象，然后执行对象方法-----指向对象本身\nconst arr = [1,2,3]\narr.fn = show\narr.fn()          \n\n//3.定时器-----指向window（这个跟严格模式无关了，因为定时器就是window的属性，由window执行）\nsetTimeOut(show,1000)\n\n//4.构造函数-----指向new出来的实例\nlet a = new show()\n\n//5.工具函数-----写什么指向什么\nshow.call(2);           //2\nshow.call([a:1]);       //[a:1]\n\n//6.forEach-----指向第二个参数，没写就是window(非严格)||undefined(严格)\nlet arr = [1,2,3]\narr.forEach(function(item){\n   console.log(this)\n},888)                  //888\n\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br"),t("span",{staticClass:"line-number"},[s._v("13")]),t("br"),t("span",{staticClass:"line-number"},[s._v("14")]),t("br"),t("span",{staticClass:"line-number"},[s._v("15")]),t("br"),t("span",{staticClass:"line-number"},[s._v("16")]),t("br"),t("span",{staticClass:"line-number"},[s._v("17")]),t("br"),t("span",{staticClass:"line-number"},[s._v("18")]),t("br"),t("span",{staticClass:"line-number"},[s._v("19")]),t("br"),t("span",{staticClass:"line-number"},[s._v("20")]),t("br"),t("span",{staticClass:"line-number"},[s._v("21")]),t("br"),t("span",{staticClass:"line-number"},[s._v("22")]),t("br"),t("span",{staticClass:"line-number"},[s._v("23")]),t("br"),t("span",{staticClass:"line-number"},[s._v("24")]),t("br"),t("span",{staticClass:"line-number"},[s._v("25")]),t("br"),t("span",{staticClass:"line-number"},[s._v("26")]),t("br"),t("span",{staticClass:"line-number"},[s._v("27")]),t("br"),t("span",{staticClass:"line-number"},[s._v("28")]),t("br"),t("span",{staticClass:"line-number"},[s._v("29")]),t("br"),t("span",{staticClass:"line-number"},[s._v("30")]),t("br"),t("span",{staticClass:"line-number"},[s._v("31")]),t("br"),t("span",{staticClass:"line-number"},[s._v("32")]),t("br")])]),t("h3",{attrs:{id:"_19-数组sort排序的原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_19-数组sort排序的原理"}},[s._v("#")]),s._v(" 19.   数组sort排序的原理")]),s._v(" "),t("h3",{attrs:{id:"_20-instanceof和typeof的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_20-instanceof和typeof的区别"}},[s._v("#")]),s._v(" 20.   instanceof和typeOf的区别")]),s._v(" "),t("h3",{attrs:{id:"_21-arguments参数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_21-arguments参数"}},[s._v("#")]),s._v(" 21.   arguments参数")]),s._v(" "),t("h3",{attrs:{id:"_22-call-apply-bind的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_22-call-apply-bind的区别"}},[s._v("#")]),s._v(" 22.   call  apply bind的区别")]),s._v(" "),t("h3",{attrs:{id:"_23-创建对象的几种方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_23-创建对象的几种方式"}},[s._v("#")]),s._v(" 23.   创建对象的几种方式")]),s._v(" "),t("ul",[t("li",[s._v("直接new Object()然后往实例对象上添加属性")]),s._v(" "),t("li",[s._v("工厂模式(在函数中构建对象并返回)")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("   function people(name,age,sex){\n      let obj = new Object();\n      obj.name = name;\n      obj.age = age;\n      obj.sex = sex;\n      return obj;\n   }\n\n   const people1 = people('fengfeng',25,'boy');\n   const people2 = people('lele',22,'girl');\n\n   但是输出一下 people1 instanceOf people会看到false,可见工厂模式还是有一定的问题\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br")])]),t("ul",[t("li",[s._v("构造函数(首字母大写，并且不需要创建对象返回对象，因为new的时候会隐式的做这些)")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("function People(name,age,sex){\n   this.name = name;\n   this.age = age;\n   this.sex = sex;\n}\n\nconst people1 = new People('fengfeng',25,'boy');\nconst people2 = new People('lele',22,'girl');\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br")])]),t("ul",[t("li",[s._v("ES6的class(外面用class包裹，里面就是将构造函数换成了construcor)")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('class People {\n   constructor(name, age, sex) {\n      this.name = name;\n      this.age = age;\n      this.sex = sex;\n   }\n}\n\nconst people1 = new People("fengfeng", 25, "boy");\nconst people2 = new People("lele", 22, "girl");\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br")])]),t("h3",{attrs:{id:"_24-原型和原型链"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_24-原型和原型链"}},[s._v("#")]),s._v(" 24.  原型和原型链")]),s._v(" "),t("ol",[t("li",[t("p",[t("strong",[s._v("proto")]),s._v("（隐式原型）与prototype（显式原型）")])]),s._v(" "),t("li",[t("p",[s._v("实例对象的隐式原型 等于 实例构造函数的显示原型")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("const aiyouwei = new Person();\naiyouwei.__proto__ === Person.prototype\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br")])])]),s._v(" "),t("li",[t("p",[s._v("只有函数对象身上才会有prototype属性，new出来的实例对象都是普通对象，没有这个属性，只有__proto__")])])]),s._v(" "),t("h3",{attrs:{id:"_25-类的继承"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_25-类的继承"}},[s._v("#")]),s._v(" 25.  类的继承")]),s._v(" "),t("h3",{attrs:{id:"_26-super关键字"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_26-super关键字"}},[s._v("#")]),s._v(" 26.  super关键字")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h3",{attrs:{id:"_27-eventloop的执行顺序"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_27-eventloop的执行顺序"}},[s._v("#")]),s._v(" 27.  Eventloop的执行顺序")]),s._v(" "),t("ol",[t("li",[s._v("同步代码，一行一行放到调用栈执行")]),s._v(" "),t("li",[s._v("遇到异步代码，先‘记录’下来，等待时机")]),s._v(" "),t("li",[s._v("时机到了，就放入异步执行队列中去")]),s._v(" "),t("li",[s._v("如果调用栈为空（即同步代码执行完毕），则Eventloop开始工作")]),s._v(" "),t("li",[s._v("轮训查找异步执行队列，有的话就放到调用栈中执行")]),s._v(" "),t("li",[s._v("接着一直轮询查找")])]),s._v(" "),t("h3",{attrs:{id:"_28-js预编译预解析"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_28-js预编译预解析"}},[s._v("#")]),s._v(" 28.  JS预编译预解析")]),s._v(" "),t("ol",[t("li",[s._v("定义阶段：(代码还没有执行。预览页面之前，写完之后)\n寻找var关键字，如果找到了提前给var定义的变量赋值undefined\n寻找的普通函数，如果找到了，函数提升，将整个函数赋值给函数名。\n如果找的var的名字和函数名字相同，函数优先。")]),s._v(" "),t("li",[s._v("执行阶段：逐行解析代码。按照上下顺序。如果碰到函数定义，忽略。")])]),s._v(" "),t("h2",{attrs:{id:"css"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#css"}},[s._v("#")]),s._v(" CSS")]),s._v(" "),t("h3",{attrs:{id:"_1-重绘和重排"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-重绘和重排"}},[s._v("#")]),s._v(" 1.\t重绘和重排")]),s._v(" "),t("p",[s._v("（重绘不一定重排，但重排一定会重绘，css3动画，视频等大多数浏览器都会自动创建图层，如果像gif图这样的，可以添加一个动画属性来让浏览器自动创建图层）")]),s._v(" "),t("h3",{attrs:{id:"_2-css实现两边固定-中间自适应"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-css实现两边固定-中间自适应"}},[s._v("#")]),s._v(" 2.\tcss实现两边固定 中间自适应")]),s._v(" "),t("h3",{attrs:{id:"_3-css3圆角属性如何兼容ie低版本浏览器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-css3圆角属性如何兼容ie低版本浏览器"}},[s._v("#")]),s._v(" 3.\tcss3圆角属性如何兼容ie低版本浏览器")]),s._v(" "),t("h3",{attrs:{id:"_4-display-none和visibility-hidden有什么区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4-display-none和visibility-hidden有什么区别"}},[s._v("#")]),s._v(" 4.\tdisplay:none和visibility：hidden有什么区别")]),s._v(" "),t("p",[s._v("(visibility占据空间，且子元素继承属性，可以单独显示)")]),s._v(" "),t("h3",{attrs:{id:"_5-对盒模型的理解"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5-对盒模型的理解"}},[s._v("#")]),s._v(" 5.\t对盒模型的理解")]),s._v(" "),t("h3",{attrs:{id:"_6-页面引入了多个css的情况下-如何处理才能减少请求"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6-页面引入了多个css的情况下-如何处理才能减少请求"}},[s._v("#")]),s._v(" 6.\t页面引入了多个css的情况下，如何处理才能减少请求")]),s._v(" "),t("p",[s._v("（新建一个css文件，利用@important 引入其余的所有css文件，主页面只引入我们新建的css即可）")]),s._v(" "),t("h3",{attrs:{id:"_7-响应式布局"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_7-响应式布局"}},[s._v("#")]),s._v(" 7. 响应式布局")]),s._v(" "),t("p",[s._v("样式旋转\n放大  阴影")]),s._v(" "),t("h2",{attrs:{id:"网络安全"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#网络安全"}},[s._v("#")]),s._v(" 网络安全")]),s._v(" "),t("ol",[t("li",[s._v("如何防止token被恶意获取")]),s._v(" "),t("li",[s._v("状态码302是什么")]),s._v(" "),t("li",[s._v("xss攻击")])]),s._v(" "),t("h2",{attrs:{id:"还没咋搞懂得"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#还没咋搞懂得"}},[s._v("#")]),s._v(" 还没咋搞懂得")]),s._v(" "),t("ol",[t("li",[s._v("移动端适配")]),s._v(" "),t("li",[s._v("webpack和vue.config.js的配置")]),s._v(" "),t("li",[s._v("重构项目的时候要考虑哪些方面")])])])}),[],!1,null,null,null);a.default=n.exports}}]);